diff --git a/ros/src/tl_detector/tl_detector.py b/ros/src/tl_detector/tl_detector.py
index bc956c6..901cc2b 100755
--- a/ros/src/tl_detector/tl_detector.py
+++ b/ros/src/tl_detector/tl_detector.py
@@ -11,6 +11,10 @@ import tf
 import cv2
 import yaml
 
+from scipy.spatial import KDTree
+
+import sys
+
 STATE_COUNT_THRESHOLD = 3
 
 class TLDetector(object):
@@ -49,6 +53,9 @@ class TLDetector(object):
         self.last_wp = -1
         self.state_count = 0
 
+        self.waypoints_2d=[[9999999999999999,9999999999999999]] #XXXXXXXXXX type error workaround...
+        self.waypoint_tree = KDTree(self.waypoints_2d) #XXXXXXXXXXX type error workaround...
+
         rospy.spin()
 
     def pose_cb(self, msg):
@@ -57,6 +64,10 @@ class TLDetector(object):
     def waypoints_cb(self, waypoints):
         self.waypoints = waypoints
 
+        if len(self.waypoints_2d) == 1:# only one  executed.
+                self.waypoints_2d =[[waypoint.pose.pose.position.x, waypoint.pose.pose.position.y] for waypoint in waypoints.waypoints]
+                self.waypoint_tree = KDTree(self.waypoints_2d)
+
     def traffic_cb(self, msg):
         self.lights = msg.lights
 
@@ -71,6 +82,8 @@ class TLDetector(object):
         self.has_image = True
         self.camera_image = msg
         light_wp, state = self.process_traffic_lights()
+        sys.stderr.write("image_cb_:" + str(state) + "\n" )
+	
 
         '''
         Publish upcoming red lights at camera frequency.
@@ -118,14 +131,14 @@ class TLDetector(object):
         return light.state
 
 
-        #XXX if(not self.has_image):
-        #XX     self.prev_light_loc = None
-        #XXX     return False
+        #XXXXX  if(not self.has_image):
+        #XXXXX     self.prev_light_loc = None
+        #XXXXX      return False
 
-        #XXX cv_image = self.bridge.imgmsg_to_cv2(self.camera_image, "bgr8")
+        #XXXXX  cv_image = self.bridge.imgmsg_to_cv2(self.camera_image, "bgr8")
 
-        #XXX #Get classification
-        #XXX return self.light_classifier.get_classification(cv_image)
+        #XXXXX  #Get classification
+        #XXXXX  return self.light_classifier.get_classification(cv_image)
 
     def process_traffic_lights(self):
         """Finds closest visible traffic light, if one exists, and determines its
@@ -138,7 +151,7 @@ class TLDetector(object):
         """
         
         closest_light = None
-        idx = None    # line_wp_idx
+        line_idx = None    # line_wp_idx
 
         # List of positions that correspond to the line to stop in front of for a given intersection
         stop_line_positions = self.config['stop_line_positions']
@@ -146,20 +159,19 @@ class TLDetector(object):
             car_idx = self.get_closest_waypoint(self.pose.pose.position.x, self.pose.pose.position.y)
             #TODO find the closest visible traffic light (if one exists)
             diff = len(self.waypoints.waypoints)
-            for i,light in enumerates(self.lights):
+            for i,light in enumerate(self.lights):
                 line = stop_line_positions[i]
                 temp_idx = self.get_closest_waypoint(line[0],line[1])
                 d = temp_idx - car_idx
                 if d >= 0 and d < diff:
-                    diff =d
+                    diff = d
                     closest_light = light
-                    idx = temp_idx
+                    line_idx = temp_idx
 
         if closest_light:
             state = self.get_light_state(closest_light)
-            return idx , state
+            return line_idx , state
 
-        self.waypoints = None
         return -1, TrafficLight.UNKNOWN
 
 if __name__ == '__main__':
diff --git a/ros/src/waypoint_updater/waypoint_updater.py b/ros/src/waypoint_updater/waypoint_updater.py
index c6fde34..1bb0bf8 100755
--- a/ros/src/waypoint_updater/waypoint_updater.py
+++ b/ros/src/waypoint_updater/waypoint_updater.py
@@ -106,7 +106,8 @@ class WaypointUpdater(object):
         if self.stopline_wp_idx == -1 or (self.stopline_wp_idx >= farthest_idx):
             lane.waypoints = base_waypoints
         else:
-            lane.waypoints = self.dcelerate_waypoints(base_waypoints,closest_idx)
+            sys.stderr.write("decelerate.................\n")
+            lane.waypoints = self.decelerate_waypoints(base_waypoints,closest_idx)
 
 
         #XXXXXXXXXXXXXXXXXXXXXXXX
@@ -153,6 +154,7 @@ class WaypointUpdater(object):
     def traffic_cb(self, msg):
         # TODO: Callback for /traffic_waypoint message. Implement
         self.stopline_wp_idx = msg.data
+        sys.stderr.write("traffic_cb______________: " + str( self.stopline_wp_idx) + "\n")
 
     def obstacle_cb(self, msg):
         # TODO: Callback for /obstacle_waypoint message. We will implement it later
